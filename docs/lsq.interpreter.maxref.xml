<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<c74object name="lsq.interpreter">

	<digest>A Lindenmayer System string processor.</digest>
	<description>
		A Lindenmayer System (L-System) string processor. Encapsulates an L-System rule set and processes L-System strings according to the rules whether an original axiom or successive iterations of the current string.
	</description>

	<metadatalist>
		<metadata name="author">Stephen Meyer</metadata>
		<metadata name="tag">Lindenmayer Systems</metadata>
		<metadata name="tag">L-systems</metadata>
	</metadatalist>

	<methodlist>

		<method name="l-string">
			<arglist>
				<arg name="initial-string" optional="0" type="list"/>
			</arglist>
			<digest>The L-system string that will seed the next generations, or axiom.</digest>
			<description>
				An L-system string should be a list of single characters that will start a series of L-system evolutions. This axiom string will immediately be passed through the L-system rule set and advance to first iteration.
			</description>
		</method>

		<method name="get">
			<digest>Send the current iteration of the stored L-system string out the right outlet.</digest>
			<description>Send the current iteration of the stored L-system string out the left outlet.</description>
		</method>

		<method name="advance">
			<digest>Advance the current l-string by one generation.</digest>
			<description>Send the currently stored l-string through the current rule set.</description>
		</method>

		<method name="rules">
			<digest>Send the current rule set out the right outlet.</digest>
			<description>
				Send the current rule set out the right outlet. Each rule will be sent as a separate list. After the last rule is sent output, the message "done" will be sent out the right outlet.
			</description>
		</method>

		<method name="rule">
			<arglist>
				<arg name="rule-definition" optional="0" type="list"/>
			</arglist>
			<digest>Add or update an existing L-system production rule by matching a predecessor symbol.</digest>
			<description>
				A rule must include at least two characters and should be passed in as a list. The first character will be treated as the rule's matching predecessor symbol. The rest of the characters in the list will be the rule's successor string.

				If the the message "rule F + + F [ X ]" is received, "F" will be the matching predecessor string and the remaining parts of the list "+ + F [ X ]" will be the F symbol's new successor string when a new l-string is received or when processing "advance" messages for the current l-string.

				The l-sequencer objects only process context free rules.
			</description>
		</method>

		<method name="deleterule">
			<arglist>
				<arg name="predecessor-symbol" optional="0" type="symbol"/>
			</arglist>
			<digest>Delete an existing L-system production rule by matching a predecessor symbol.</digest>
			<description>Delete an existing L-system production rule by matching a predecessor symbol.</description>
		</method>

		<method name="strict">
			<arglist>
				<arg name="on/off" optional="0" type="long"/>
			</arglist>
			<digest>Set the interpreter to strict mode.</digest>
			<description>
				Set the interpreter to strict mode. A value of zero disables strict mode, non-zero enables it. Strict mode is diabled by default.

				In strict mode the following l-strings rules are enforced and invalid l-strings will not be passed to the string processor: a 0-length string; all open branches (indicated by '[') in a string must be closed with ']'; a string may not start with a branch; a string may not contain adjacent open branching symbols (i.e., '[ [ ...'); a string may not contain a closing branch symbol ']' for an unopened branch; all metadata symbol sequences (one or more successive '+' and '-' chars) must be followed by an event symbol.
			</description>
		</method>

	</methodlist>

	<seealsolist>
		<seealso name="lsq.sequencer"/>
		<seealso name="lsq.translator"/>
	</seealsolist>

</c74object>
